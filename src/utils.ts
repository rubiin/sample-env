import fs from "node:fs";
import { homedir } from "node:os";
import readline from "node:readline";
import path from "node:path";
import chalk from "chalk";

export const splitLine = (line: string) => {
  const result = line.split("=");

  if (result.length === 1) return result[0];
  return `${result[0]}=`;
};

const defaultEnvironmentPath = `${homedir()}/.env.rc`;

interface Options {
  env?: string;
  sample?: string;
  banner?: string;
  prefix?: string;
  removeComments?: boolean;
}

const readCongfigFile = () => {
  if (!fs.existsSync(defaultEnvironmentPath)) {
    const defaultConfig = {
      env: ".env",
      sample: ".env.sample",
      banner: "# This is a sample file generated by sample-env",
      removeComments: false,
    } as Options;

    fs.writeFileSync(
      defaultEnvironmentPath,
      JSON.stringify(defaultConfig, undefined, 2),
    );

    return defaultConfig;
  }
  const config = fs.readFileSync(defaultEnvironmentPath, "utf8");

  return JSON.parse(config) as Options;
};

export const writeEnvironment = (allArguments: Options) => {
  const configFile = readCongfigFile();

  const environmentPath = path.resolve(allArguments.env ?? configFile.env);
  if (!fs.existsSync(environmentPath)) {
    console.error(
      chalk.red(`❌ Config file not found at path: ${environmentPath}`),
    );
    // eslint-disable-next-line unicorn/no-process-exit
    process.exit(0);
  }

  const samplePath = path.resolve(allArguments.sample ?? configFile.sample);
  const banner = allArguments.banner ?? configFile.banner;
  const removeComments
    = allArguments.removeComments ?? configFile.removeComments;
  const prefix = allArguments?.prefix;
  const fileStream = fs.createWriteStream(samplePath);

  // convert comma separated prefix to array
  const prefixArray
    = prefix && typeof prefix === "string" && prefix.includes(",")
      ? prefix.split(",")
      : prefix;

  const reader = readline.createInterface({
    input: fs.createReadStream(environmentPath),
    crlfDelay: Number.POSITIVE_INFINITY,
  });

  if (banner) fileStream.write(`${banner}\n`);

  reader.on("line", (line) => {
    if (
      (line.length === 0 && !prefix)
      || (line.startsWith("#") && removeComments)
    ) {
      fileStream.write("\n");
    }
    else {
      // if prefix exists and the line doesn't has any prefix , write nothing
      if (
        prefixArray
        && Array.isArray(prefixArray)
        && !prefixArray.some(element => line.startsWith(element))
      )
        return;
      fileStream.write(`${splitLine(line)}\n`);
    }
  });

  console.debug(
    chalk.blue("🚀 Successfully generated file at:")
      + chalk.green(` ${samplePath}`),
  );
};
