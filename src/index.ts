#! /usr/bin/env node

import fs from "node:fs";
import { homedir } from "node:os";
import readline from "node:readline";
import path from "node:path";
import yargs from "yargs/yargs";
import { hideBin } from "yargs/helpers";
import chalk from "chalk";
import packageJson from "../package.json";
import { splitLine } from "./utils";

interface Options {
  env?: string;
  sample?: string;
  banner?: string;
  prefix?: string;
  removeComments?: boolean;
}

const defaultEnvironmentPath = `${homedir()}/.envrc`;

const writeCongfigFile = (data: Options) => {
  return fs.writeFileSync(
    defaultEnvironmentPath,
    JSON.stringify(data, undefined, 2),
  );
};

const readCongfigFile = () => {
  if (!fs.existsSync(defaultEnvironmentPath)) {
    const defaultConfig = {
      env: ".env",
      sample: ".env.sample",
      banner: "# This is a sample file generated by sample-env",
      removeComments: false,
    } as Options;

    writeCongfigFile(defaultConfig);

    return defaultConfig;
  }
  const config = fs.readFileSync(path.resolve(defaultEnvironmentPath), "utf8");

  return JSON.parse(config) as Options;
};

const allArguments = yargs(hideBin(process.argv))
  .usage("Usage: $0 [options]")
  .help("help")
  .alias("help", "h")
  .version("version", packageJson.version)
  .alias("version", "v")
  .showHelpOnFail(true, "whoops, something went wrong! run with --help")
  .options({
    env: {
      description: "input file name (default: .env)",
      requiresArg: true,
      required: false,
      alias: "e",
    },
    sample: {
      description: "output file name (default: .env.sample)",
      requiresArg: true,
      required: false,
      alias: "s",
    },
    banner: {
      description: "add banner to output file",
      requiresArg: true,
      required: false,
      alias: "b",
    },
    removeComments: {
      description: `removes comment from output file
      (default: false)`,
      requiresArg: false,
      required: false,
      boolean: true,
      alias: "r",
    },
    prefix: {
      description:
        "List of string prefixes to use only certain env variables",
      requiresArg: true,
      required: false,
      alias: "p",
    },
  }).argv as Options;

export const main = () => {
  const configFile = readCongfigFile();

  const environmentPath = path.resolve(allArguments.env ?? configFile.env);
  if (!fs.existsSync(environmentPath)) {
    console.error(chalk.red(`❌ Config file not found at path: ${environmentPath}!`));
    process.exit(0);
  }

  const samplePath = path.resolve(allArguments.sample ?? configFile.sample);
  const fileStream = fs.createWriteStream(samplePath);
  const banner = allArguments.banner ?? configFile.banner;
  const removeComments
    = allArguments.removeComments ?? configFile.removeComments;
  const prefix = allArguments?.prefix;

  // convert comma separated prefix to array
  const prefixArray = prefix && typeof prefix === "string" && prefix.includes(",") ? prefix.split(",") : prefix;

  const reader = readline.createInterface({
    input: fs.createReadStream(path.resolve(environmentPath)),
    crlfDelay: Number.POSITIVE_INFINITY,
  });

  if (banner) fileStream.write(`${banner}\n`);

  reader.on("line", (line) => {
    if ((line.length === 0 && !prefix) || (line.startsWith("#") && removeComments)) {
      fileStream.write("\n");
    }
    else {
      // if prefix exists and the line doesn't has any prefix , write nothing
      if (prefixArray && Array.isArray(prefixArray) && !prefixArray.some(element => line.startsWith(element))) return;
      fileStream.write(`${splitLine(line)}\n`);
    }
  });

  console.debug(
    chalk.blue("🚀 Successfully generated file at") + chalk.red(` ${samplePath}`),
  );
};

main();
